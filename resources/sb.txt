import org.kohsuke.github.*;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Component;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.Base64;
import java.util.List;
import java.util.Objects;

@SpringBootApplication
public class CreatePRAndAddLabelApplication {

    public static void main(String[] args) {
        SpringApplication.run(CreatePRAndAddLabelApplication.class, args);
    }

}

@Component
class CreatePRAndAddLabel {

    @Value("${github.token}")
    private String githubToken;

    @Value("${github.repo}")
    private String githubRepository;

    @Value("${app.name}")
    private String appName;

    @Value("${git.branch.prefix}")
    private String branchPrefix;

    @Value("${git.commit.prefix}")
    private String commitPrefix;

    @Value("${git.commit.message}")
    private String commitMessage;

    @Value("${file.path}")
    private String filePath;

    @Value("${variable.key}")
    private String variableKey;

    @Value("${num.retries}")
    private int numRetries;

    @Value("${backoff.factor}")
    private int backoffFactor;

    private GitHub githubClient;

    private static final String BASE_URL = "https://api.github.com";

    @EventListener(ApplicationReadyEvent.class)
    public void updateImageTagAndRaisePR() throws IOException {
        githubClient = new GitHubBuilder().withOAuthToken(githubToken).build();
        GHRepository repo = githubClient.getRepository(githubRepository);

        String branchName = branchPrefix + "-" + appName;
        String newFileContent = "";

        GHContent fileContent = getFileContent(repo, branchName);
        String content = fileContent.getContent();
        newFileContent = updateImageTag(content);

        createBranchIfNeeded(repo, branchName);

        commitToFile(repo, fileContent, newFileContent);

        createPR(repo, branchName);
    }

    private GHContent getFileContent(GHRepository repo, String branchName) throws IOException {
        String filePath = this.filePath;
        String ref = "heads/" + branchName;
        return repo.getFileContent(filePath, ref);
    }

    private String updateImageTag(String content) {
        // Update the content here as per Python logic
        return content;
    }

    private void createBranchIfNeeded(GHRepository repo, String branchName) throws IOException {
        if (repo.getBranches().contains(repo.getBranch(branchName))) {
            repo.getRef("heads/" + branchName).delete();
        }

        repo.createRef("refs/heads/" + branchName, repo.getBranch("master").getSHA1());
    }

    private void commitToFile(GHRepository repo, GHContent fileContent, String newFileContent) throws IOException {
        String branchName = fileContent.getBranch();
        String filePath = fileContent.getPath();

        byte[] contentBytes = Base64.getDecoder().decode(fileContent.getContent());
        String contentString = new String(contentBytes, StandardCharsets.UTF_8);

        String updatedContentString = contentString.replace(fileContent.getContent(), newFileContent);

        repo.createContent(updatedContentString.getBytes(StandardCharsets.UTF_8), commitMessage, filePath, branchName);
    }

    private void createPR(GHRepository repo, String branchName) throws IOException {
        String prTitle = commitPrefix + ": " + branchName + " - Update image tag for application " + appName;
        GHBranch branch = repo.getBranch(branchName);
        GHBranch masterBranch = repo.getBranch("master");

        if (branch != null && !Objects.equals(branch.getSHA1(), masterBranch.getSHA1())) {
            GHPullRequest pr = repo.createPullRequest(prTitle, branchName, "master", prTitle);
            addLabelsToPR(repo, pr);
        }
    }

    private void addLabelsToPR(GHRepository repo, GHPullRequest pr) throws IOException {
        List<String> labels = new ArrayList<>();
        labels.add("canary");
        labels.add("env: sit");
        labels.add("releaseName: test");
        labels.add("appname: " + appName);

        GHIssue issue = pr.getIssue();
        issue.setLabels(labels.toArray(new String[0]));
    }
}


<dependencies>
    <dependency>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter</artifactId>
    </dependency>
    <dependency>
        <groupId>org.kohsuke</groupId>
        <artifactId>github-api</artifactId>
        <version>1.116</version> <!-- or the latest version -->
    </dependency>
</dependencies>


import org.kohsuke.github.GHBranch;
import org.kohsuke.github.GHIssue;
import org.kohsuke.github.GHPullRequest;
import org.kohsuke.github.GHRepository;
import org.kohsuke.github.GitHub;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.servlet.support.SpringBootServletInitializer;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import java.io.IOException;

@SpringBootApplication
public class CreatePRAndAddLabelApplication extends SpringBootServletInitializer {

    public static void main(String[] args) {
        SpringApplication.run(CreatePRAndAddLabelApplication.class, args);
    }

}

@RestController
class PRController {

    @Value("${github.token}")
    private String githubToken;

    @Value("${github.repo}")
    private String githubRepository;

    @PostMapping("/create_pr_and_add_label")
    public ResponseEntity<String> createPRAndAddLabel(@RequestBody Payload data) {
        try {
            String API_TOKEN = System.getenv("GITHUB_TOKEN_PSW");
            String appName = data.getName();
            String imageTag = data.getVersion();
            String branchName = "JIRA-1236-" + appName;
            String applicationManifestRepo = "sarsatis/helm-charts";
            String gitCommitPrefix = "feat";
            String filePath = "manifests/" + appName + "/sit/immutable/values.yaml";

            GitHub githubClient = new GitHubBuilder().withOAuthToken(API_TOKEN).build();
            GHRepository repo = githubClient.getRepository(applicationManifestRepo);

            // Your logic for updating file content, creating PR, and adding labels goes here...

            String prUrl = "https://github.com/your_username/your_repository/pulls/1";  // Replace with the actual PR URL

            return ResponseEntity.status(HttpStatus.FOUND).header("Location", prUrl).body(null);
        } catch (IOException e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(e.getMessage());
        }
    }
}

class Payload {
    private String name;
    private String version;

    // Getters and setters
}
